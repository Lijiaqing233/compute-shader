#pragma kernel MainCS

struct Particle
{
    float3 position; //vec3 = float3 = 12B
    float3 v;
    float3 a;
    float3 color;
};


RWStructuredBuffer<Particle> _ParticleBuffer;
float _Time;



[numthreads(256, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    //_ParticleBuffer[id.x].v = _ParticleBuffer[id.x].a * 2;
    //_ParticleBuffer[id.x].position += _ParticleBuffer[id.x].v * 0.01;
    float3 r;
    float3 p = _ParticleBuffer[id.x].position;
    
    float G = -1e1;
    float eps = 1e-3;
    float dt =1e-5;
    for (int i = 0; i < 2560; ++i)
    {
        
        if (id.x != i)
        {
            r.x = p.x - _ParticleBuffer[i].position.x;
            r.y = p.y - _ParticleBuffer[i].position.y;
            
            float x = 0.05 / (sqrt(r.x * r.x + r.y * r.y) );
            
            _ParticleBuffer[id.x].a.x += eps  * (pow(x, 13) - pow(x, 7)) * r.x;
            _ParticleBuffer[id.x].a.x += G  * pow(x, 3) * r.x;
            
            _ParticleBuffer[id.x].a.y += eps  * (pow(x, 13) - pow(x, 7)) * r.y;
            _ParticleBuffer[id.x].a.y += G  *  pow(x, 3) * r.y;
            
           // _ParticleBuffer[id.x].a += -GM / pow(x, 3) * float3(0.01, 0.01, 0.01);
        }
    }
              
    
    _ParticleBuffer[id.x].v.x += _ParticleBuffer[id.x].a.x * dt;
    _ParticleBuffer[id.x].v.y += _ParticleBuffer[id.x].a.y * dt;
    
    _ParticleBuffer[id.x].position.x += _ParticleBuffer[id.x].v.x * dt;
    _ParticleBuffer[id.x].position.y += _ParticleBuffer[id.x].v.y * dt;
    //_ParticleBuffer[id.x].position = r * float3(0.01, 0.01, 0.01);

}